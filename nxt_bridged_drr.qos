#!/bin/sh

# QoS Script version for CEROwrt.

. /usr/lib/sqm/functions.sh

eth_setup() {

    ethtool -K $IFACE gso off
    ethtool -K $IFACE tso off
    ethtool -K $IFACE ufo off
    ethtool -K $IFACE gro off

    if [ -e /sys/class/net/$IFACE/queues/tx-0/byte_queue_limits ]
    then
      for i in /sys/class/net/$IFACE/queues/tx-*/byte_queue_limits
      do
        echo 4620 > $i/limit_max
      done
    fi

}


dc_nxt() {

    $TC filter add dev $1 protocol ip parent 2:0 prio $prio \
    u32 match ip dport $2 0xffff flowid $3
    prio=$(($prio + 1))
    $TC filter add dev $1 protocol ipv6 parent 2:0 prio $prio \
    u32 match ip dport $2 0xffff flowid $3
    prio=$(($prio + 1))

}

sc_nxt() {

    $TC filter add dev $1 protocol ip parent 2:0 prio $prio \
    u32 match ip sport $2 0xffff flowid $3
    prio=$(($prio + 1))
    $TC filter add dev $1 protocol ipv6 parent 2:0 prio $prio \
    u32 match ip sport $2 0xffff flowid $3
    prio=$(($prio + 1))

}

reset_count() {

    prio=1

}

egress() {

    $TC qdisc del dev $IFACE root 2> /dev/null
    $TC qdisc add dev $IFACE root handle 1: tbf rate ${UPLINK}kbit \
    burst 1540 limit `expr $ELIMIT \* 1540`

    $TC qdisc add dev $IFACE parent 1: handle 2: drr
    $TC class add dev $IFACE parent 2: classid 2:1 drr quantum 770
    $TC class add dev $IFACE parent 2: classid 2:2 drr quantum 385

    $TC qdisc add dev $IFACE parent 2:1 handle 21: $QDISC `get_limit ${ELIMIT}` \
    target 15ms `get_ecn ${EECN}` quantum 385 \
    flows 16 ${EQDISC_OPTS}
    $TC qdisc add dev $IFACE parent 2:2 handle 22: $QDISC `get_limit ${ELIMIT}` \
    target 15ms `get_ecn ${EECN}` quantum 385 \
    flows 16 ${EQDISC_OPTS}

    reset_count

    dc_nxt $IFACE 20 2:1
    dc_nxt $IFACE 21 2:1
    dc_nxt $IFACE 22 2:1
    dc_nxt $IFACE 25 2:1
    dc_nxt $IFACE 53 2:1
    dc_nxt $IFACE 80 2:1
    dc_nxt $IFACE 110 2:1
    dc_nxt $IFACE 123 2:1
    dc_nxt $IFACE 443 2:1
    dc_nxt $IFACE 465 2:1
    dc_nxt $IFACE 993 2:1
    dc_nxt $IFACE 995 2:1

    $TC filter add dev $IFACE parent 2:0 protocol all prio 99 u32 \
    match u32 0 0 flowid 2:2

}

ingress() {

    $TC qdisc del dev $IFACE handle ffff: ingress 2> /dev/null
    $TC qdisc add dev $IFACE handle ffff: ingress

    $TC qdisc del dev $DEV root 2> /dev/null
    $TC qdisc add dev $DEV root handle 1: tbf rate ${DOWNLINK}kbit \
    burst 1540 limit `expr $ILIMIT \* 1540`

    $TC qdisc add dev $DEV parent 1: handle 2: drr
    $TC class add dev $DEV parent 2: classid 2:1 drr quantum 3080
    $TC class add dev $DEV parent 2: classid 2:2 drr quantum 1540

    $TC qdisc add dev $DEV parent 2:1 handle 21: $QDISC `get_limit ${ILIMIT}` \
    target 15ms `get_ecn ${IECN}` quantum 1540 \
    flows 128 ${IQDISC_OPTS}
    $TC qdisc add dev $DEV parent 2:2 handle 22: $QDISC `get_limit ${ILIMIT}` \
    target 15ms `get_ecn ${IECN}` quantum 1540 \
    flows 128 ${IQDISC_OPTS}

    reset_count

    sc_nxt $DEV 20 2:1
    sc_nxt $DEV 21 2:1
    sc_nxt $DEV 22 2:1
    sc_nxt $DEV 25 2:1
    sc_nxt $DEV 53 2:1
    sc_nxt $DEV 80 2:1
    sc_nxt $DEV 110 2:1
    sc_nxt $DEV 123 2:1
    sc_nxt $DEV 443 2:1
    sc_nxt $DEV 465 2:1
    sc_nxt $DEV 993 2:1
    sc_nxt $DEV 995 2:1

    $TC filter add dev $DEV parent 2:0 protocol all prio 99 u32 \
    match u32 0 0 flowid 2:2

    ifconfig $DEV up

    $TC filter add dev $IFACE parent ffff: protocol all prio 1 u32 \
    match u32 0 0 action mirred egress redirect dev $DEV

}

do_modules
eth_setup

if [ "$UPLINK" -ne 0 ];
then
    egress
    logger "egress shaping activated"
else
    logger "egress shaping deactivated"
    tc qdisc del dev $IFACE root 2> /dev/null
fi

if [ "$DOWNLINK" -ne 0 ];
then
    ingress
    logger "ingress shaping activated"
else
    logger "ingress shaping deactivated"
    tc qdisc del dev $DEV root 2> /dev/null
    tc qdisc del dev $IFACE ingress 2> /dev/null
fi
