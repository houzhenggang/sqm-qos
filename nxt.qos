#!/bin/sh

# QoS Script version for CEROwrt.

. /usr/lib/sqm/functions.sh

fc_nxt() {

    $TC filter add dev $1 protocol ip parent $2 prio $prio \
    u32 match ip tos $3 0xfc classid $4
    prio=$(($prio + 1))
    $TC filter add dev $1 protocol ipv6 parent $2 prio $prio \
    u32 match ip6 priority $3 0xfc classid $4
    prio=$(($prio + 1))

}

dc_nxt() {

    $TC filter add dev $1 protocol ip parent $2 prio $prio \
    u32 match ip dport $3 0xffff classid $4
    prio=$(($prio + 1))
    $TC filter add dev $1 protocol ipv6 parent $2 prio $prio \
    u32 match ip dport $3 0xffff classid $4
    prio=$(($prio + 1))

}

sc_nxt() {

    $TC filter add dev $1 protocol ip parent $2 prio $prio \
    u32 match ip sport $3 0xffff classid $4
    prio=$(($prio + 1))
    $TC filter add dev $1 protocol ipv6 parent $2 prio $prio \
    u32 match ip sport $3 0xffff classid $4
    prio=$(($prio + 1))

}

reset_count() {

    prio=1

}

diffserv_nxt() {

    interface=$1

    fc_nxt $interface 1:0 0x30 1:12 # AF12
    fc_nxt $interface 1:0 0x90 1:11 # AF42
    fc_nxt $interface 1:0 0xc0 1:11 # CS6
    fc_nxt $interface 1:0 0x70 1:11 # AF32
    fc_nxt $interface 1:0 0x50 1:12 # AF22
    fc_nxt $interface 1:0 0xb8 1:11 # EF
    fc_nxt $interface 1:0 0x20 1:12 # CS1
    fc_nxt $interface 1:0 0x40 1:12 # CS2
    fc_nxt $interface 1:0 0x60 1:11 # CS3
    fc_nxt $interface 1:0 0x80 1:11 # CS4
    fc_nxt $interface 1:0 0xa0 1:11 # CS5
    fc_nxt $interface 1:0 0xe0 1:11 # CS7
    fc_nxt $interface 1:0 0x28 1:12 # AF11
    fc_nxt $interface 1:0 0x38 1:12 # AF13
    fc_nxt $interface 1:0 0x48 1:12 # AF21
    fc_nxt $interface 1:0 0x58 1:12 # AF23
    fc_nxt $interface 1:0 0x68 1:11 # AF31
    fc_nxt $interface 1:0 0x78 1:11 # AF33
    fc_nxt $interface 1:0 0x88 1:11 # AF41
    fc_nxt $interface 1:0 0x98 1:11 # AF43

}

egress() {

    CEIL=`expr $UPLINK - 16`
    NORMAL=`expr $UPLINK \* 50 / 100`
    BULK=`expr $UPLINK \* 20 / 100`
    MAXQ=`expr $CEIL \* 95 / 100`

    $TC qdisc del dev $IFACE root 2> /dev/null
    $TC qdisc add dev $IFACE root handle 1: `get_stab_string` hfsc default 12

    $TC class add dev $IFACE parent 1: classid 1:1 hfsc sc rate ${CEIL}kbit \
    ul rate ${CEIL}kbit

    $TC class add dev $IFACE parent 1:1 classid 1:11 hfsc sc rate ${NORMAL}kbit \
    ul rate ${MAXQ}kbit
    $TC class add dev $IFACE parent 1:1 classid 1:12 hfsc sc rate ${BULK}kbit \
    ul rate ${MAXQ}kbit

    $TC qdisc add dev $IFACE parent 1:11 handle 110: $QDISC `get_limit ${ELIMIT}` \
    `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` `get_quantum 300` \
    `get_flows ${NORMAL}` ${EQDISC_OPTS}
    $TC qdisc add dev $IFACE parent 1:12 handle 120: $QDISC `get_limit ${ELIMIT}` \
    `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` `get_quantum 300` \
    `get_flows ${BULK}` ${EQDISC_OPTS}

    reset_count
    diffserv_nxt $IFACE

    dc_nxt $IFACE 1:0 20 1:11
    dc_nxt $IFACE 1:0 21 1:11
    dc_nxt $IFACE 1:0 22 1:11
    dc_nxt $IFACE 1:0 25 1:11
    dc_nxt $IFACE 1:0 53 1:11
    dc_nxt $IFACE 1:0 80 1:11
    dc_nxt $IFACE 1:0 110 1:11
    dc_nxt $IFACE 1:0 123 1:11
    dc_nxt $IFACE 1:0 443 1:11
    dc_nxt $IFACE 1:0 465 1:11
    dc_nxt $IFACE 1:0 993 1:11
    dc_nxt $IFACE 1:0 995 1:11

}

ingress() {

    CEIL=`expr $DOWNLINK - 16`
    NORMAL=`expr $DOWNLINK \* 50 / 100`
    BULK=`expr $DOWNLINK \* 30 / 100`
    MAXQ=`expr $CEIL \* 95 / 100`

    $TC qdisc del dev $IFACE handle ffff: ingress 2> /dev/null
    $TC qdisc add dev $IFACE handle ffff: ingress

    $TC qdisc del dev $DEV root 2> /dev/null
    $TC qdisc add dev $DEV root handle 1: `get_stab_string` hfsc default 12

    $TC class add dev $DEV parent 1: classid 1:1 hfsc sc rate ${CEIL}kbit \
    ul rate ${CEIL}kbit

    $TC class add dev $DEV parent 1:1 classid 1:11 hfsc sc rate ${NORMAL}kbit \
    ul rate ${MAXQ}kbit
    $TC class add dev $DEV parent 1:1 classid 1:12 hfsc sc rate ${BULK}kbit \
    ul rate ${MAXQ}kbit

    $TC qdisc add dev $DEV parent 1:11 handle 110: $QDISC `get_limit ${ILIMIT}` \
    `get_target "${ITARGET}" ${DOWNLINK}` `get_ecn ${IECN}` `get_quantum 1514` \
    `get_flows ${NORMAL}` ${IQDISC_OPTS}
    $TC qdisc add dev $DEV parent 1:12 handle 120: $QDISC `get_limit ${ILIMIT}` \
    `get_target "${ITARGET}" ${DOWNLINK}` `get_ecn ${IECN}` `get_quantum 600` \
    `get_flows ${BULK}` ${IQDISC_OPTS}

    reset_count

    sc_nxt $DEV 1:0 20 1:11
    sc_nxt $DEV 1:0 21 1:11
    sc_nxt $DEV 1:0 22 1:11
    sc_nxt $DEV 1:0 25 1:11
    sc_nxt $DEV 1:0 53 1:11
    sc_nxt $DEV 1:0 80 1:11
    sc_nxt $DEV 1:0 110 1:11
    sc_nxt $DEV 1:0 123 1:11
    sc_nxt $DEV 1:0 443 1:11
    sc_nxt $DEV 1:0 465 1:11
    sc_nxt $DEV 1:0 993 1:11
    sc_nxt $DEV 1:0 995 1:11

    ifconfig $DEV up

    $TC filter add dev $IFACE parent ffff: protocol all prio 1 u32 \
    match u32 0 0 flowid 1:1 action mirred egress redirect dev $DEV

}

do_modules

if [ "$UPLINK" -ne 0 ];
then
    egress
    logger "egress shaping activated"
else
    logger "egress shaping deactivated"
    tc qdisc del dev $IFACE root 2> /dev/null
fi

if [ "$DOWNLINK" -ne 0 ];
then
    ingress
    logger "ingress shaping activated"
else
    logger "ingress shaping deactivated"
    tc qdisc del dev $DEV root 2> /dev/null
    tc qdisc del dev $IFACE ingress 2> /dev/null
fi
